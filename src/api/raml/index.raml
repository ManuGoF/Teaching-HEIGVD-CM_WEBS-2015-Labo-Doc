#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/api/
protocols: [HTTPS]
mediaType: application/json

traits:
  - auth: !include _traits/auth.raml

/users:
  description: User resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of users.
    queryParameters:
      sorting:
        displayName: sorting
        type: string
        description: List ordering (ASC/DESC)
        example: Not for the moment
        required: false
      paging:
        displayName: paging
        type: string
        description: Manage the collection pagination
        example: Not for the moment
        required: false
      filtering:
        displayName: filtering
        type: string
        description: Criteria to filter data
        example: Not for the moment
        required: false
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                },
                {
                  "id": "54d8ae163fd30364605c81a9",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+8211332",
                  "roles": [
                    "citizen",
                    "staff"
                  ]
                },
                ...
              ]
  post:
    description: Create a new user.
    body:
      application/json:
        example: |
          {
            "firstname": "Romain",
            "lastname": "Terieur",
            "phone": "+6624582",
            "roles": [
              "citizen"
            ]
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "firstname": "Romain",
                "lastname": "Terieur",
                "phone": "+6624582",
                "roles": [
                  "citizen"
                ]
              }
  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve a user by its id.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }     
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update a user specified by its id.
      body:
        application/json:
          example: |
            {
              "firstname": "Romain",
              "lastname": "Terieur",
              "phone": "+6624582",
              "roles": [
                "citizen"
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a user specified by its id.
      responses:
        204:
          body:

/issues:
  description: Issue resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of issues.
    queryParameters:
      sorting:
        displayName: sorting
        type: string
        description: List ordering (ASC/DESC)
        example: Not for the moment
        required: false
      paging:
        displayName: paging
        type: string
        description: Manage the collection pagination
        example: Not for the moment
        required: false
      filtering:
        displayName: filtering
        type: string
        description: |
          Criteria to filter data
          - `userID` int, Criteria to list by a particular user (ID).
          - `fromDate` datetime, Criteria to list from a date.
          - `toDate` datetime, Criteria to list until a date.
          - `resolved` boolean, Criteria to list resolved issues (TRUE or FALSE).
          - `issueTypeId` int, Criteria to list by a certain issueType (ID).
        example: Not for the moment
        required: false
    responses:
      200:
          body:
            application/json:
              example: |
                [
                  {
                    "id": "54d8ae163sadg755c81a4",
                    "author": "http://localhost/api/users/{id}",
                    "issueType": "http://localhost/api/issueType/{id}",
                    "description": "Lampadaire cassé",
                    "latitude": "40,689249400000000000",
                    "longitude": "-74,044500400000000000",
                    "status": "acknowledged",
                    "staffmember": "http://localhost/api/users/{id}",
                    "creatingDate": "2014-08-20 15:30:00",
                    "closingDate": "2014-09-20 15:30:00"
                  },
                  {
                    "id": "54d8ae163sadg7555781a4",
                    "author": "http://localhost/api/users/{id}",
                    "issueType": "http://localhost/api/issueType/{id}",
                    "description": "Lampadaire cassé",
                    "latitude": "40,689249400000000000",
                    "longitude": "-74,044500400000000000",
                    "status": "acknowledged",
                    "staffmember": "http://localhost/api/users/{id}",
                    "creatingDate": "2014-08-20 15:30:00",
                    "closingDate": "2014-09-20 15:30:00"
                  },
                  ...
                ]

  post:
    description: Create a new issue.
    body:
      application/json:
        example: |
          {
            "author": "http://localhost/api/users/{id}",
            "issueType": "http://localhost/api/issueType/{id}",
            "description": "Lampadaire cassé",
            "latitude": "40,689249400000000000",
            "longitude": "-74,044500400000000000",
            "status": "acknowledged",
            "staffmember": "http://localhost/api/users/{id}",
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163sadg7555781a4",
                "author": "http://localhost/api/users/{id}",
                "issueType": "http://localhost/api/issueType/{id}",
                "description": "Lampadaire cassé",
                "latitude": "40,689249400000000000",
                "longitude": "-74,044500400000000000",
                "status": "acknowledged",
                "staffmember": "http://localhost/api/users/{id}",
                "creatingDate": "2014-08-20 15:30:00",
                "closingDate": "2014-09-20 15:30:00"
              }

  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve an issue specified by its id.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163sadg7555781a4",
                  "author": "http://localhost/api/users/{id}",
                  "issueType": "http://localhost/api/issueType/{id}",
                  "description": "Lampadaire cassé",
                  "latitude": "40,689249400000000000",
                  "longitude": "-74,044500400000000000",
                  "status": "acknowledged",
                  "staffmember": "http://localhost/api/users/{id}",
                  "creatingDate": "2014-08-20 15:30:00",
                  "closingDate": "2014-09-20 15:30:00"
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update an issue specified by its id.
      body:
        application/json:
          example: |
            {
              "author": "http://localhost/api/users/{id}",
              "issueType": "http://localhost/api/issueType/{id}",
              "description": "Lampadaire cassé",
              "latitude": "40,689249400000000000",
              "longitude": "-74,044500400000000000",
              "status": "acknowledged",
              "staffmember": "http://localhost/api/users/{id}",
              "closingDate": "2014-09-20 15:30:00"
            }
      responses:
        200:
          body: 
            application/json:
              example: |
                {
                  "id": "54d8ae163sadg7555781a4",
                  "author": "http://localhost/api/users/{id}",
                  "issueType": "http://localhost/api/issueType/{id}",
                  "description": "Lampadaire cassé",
                  "latitude": "40,689249400000000000",
                  "longitude": "-74,044500400000000000",
                  "status": "acknowledged",
                  "staffmember": "http://localhost/api/users/{id}",
                  "creatingDate": "2014-08-20 15:30:00",
                  "closingDate": "2014-09-20 15:30:00"
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete an issue specified by its id.
      responses:
        204:
          body:

    /actions:
      get:
        is: [auth: { roles: 'staff' }]
        description: Retrieve a list of actions specified by an issue.
        responses:
          200:
              body:
                application/json:
                  example: |
                    {
                      "id": "54d8ae163fd30364605c81a4",
                      "type": "addComment",
                      "description": "Ajout d'un commentaire",
                      "datetime": "2014-08-20 15:30:00"
                    }
      post:
        description: Create an action for an issue.
        body:
          application/json:
            example: |
              {
                "type": "addComment",
                "description": "Ajout d'un commentaire",
                "datetime": "2014-08-20 15:30:00"
              }
        responses:
          201:
            body:
              application/json:
                example: |
                  {
                    "id": "54d8ae163fd30364605c81a4",
                    "type": "addComment",
                    "description": "Ajout d'un commentaire",
                    "datetime": "2014-08-20 15:30:00"
                  }

/issueType:
  description: IssueType resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of issueTypes.
    queryParameters:
      sorting:
        displayName: sorting
        type: string
        description: List ordering (ASC/DESC)
        example: Not for the moment
        required: false
      paging:
        displayName: paging
        type: string
        description: Manage the collection pagination
        example: Not for the moment
        required: false
      filtering:
        displayName: filtering
        type: string
        description: Criteria to filter data
        example: Not for the moment
        required: false
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd303634505c81a4",
                  "shortname": "Panne",
                  "description": "Panne du matériel public"
                },
                {
                  "id": "54d8aedsadfd30364605c81a9",
                  "shortname": "Casse",
                  "description": "Matériel public cassé"
                },
                ...
              ]
  post:
    description: Create a new issueType.
    body:
      application/json:
        example: |
          {
            "shortname": "Casse",
            "description": "Matériel public cassé"    
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8aedsadfd30364605c81a9",
                "shortname": "Casse",
                "description": "Matériel public cassé"
              }
  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve a issueType by its id.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd303634505c81a4",
                  "shortname": "Panne",
                  "description": "Panne du matériel public"
                }     
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update a issueType specified by its id.
      body:
        application/json:
          example: |
            {
              "shortname": "Panne",
              "description": "Panne du matériel public"
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd303634505c81a4",
                  "shortname": "Panne",
                  "description": "Panne du matériel public"
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a issueType specified by its id.
      responses:
        204:
          body:

/actions:
  description: Actions resource
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of actions.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "type": "addComment",
                  "description": "Ajout d'un commentaire",
                  "datetime": "2014-08-20 15:30:00"
                },
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "type": "addTag",
                  "description": "Ajout d'un tag",
                  "datetime": "2014-08-20 15:40:00"
                },
                ...
              ]

/data:
  description: Data resource.
  /populate:
    post:
      description: Allow to populate random data to have a starting situation.
      responses:
        200:
          body:

