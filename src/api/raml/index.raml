#%RAML 0.8
---
title: API Resource
baseUri: https://cryptic-hollows-9214.herokuapp.com/api/{version}
version: v1
protocols: [HTTP]
mediaType: application/json

traits:
  - auth: !include _traits/auth.raml

/users:
  description: User resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of users.
    queryParameters:
      search:
        displayName: search
        type: string
        description: Searching a word into the content of his parameters. 
        example: users?search=Thomas
        required: false
      order:
        displayName: order
        type: string
        description: List ordering (ASC/DESC)
        example: users?order=ASC
        required: false
      by:
        displayName: by
        type: string
        description: Ordering by parameter
        example: users?by=firstname
        required: false
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                },
                {
                  "id": "54d8ae163fd30364605c81a9",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+8211332",
                  "roles": [
                    "citizen",
                    "staff"
                  ]
                },
                ...
              ]
  post:
    description: Create a new user.
    body:
      application/json:
        example: |
          {
            "firstname": "Romain",
            "lastname": "Terieur",
            "phone": "+6624582",
            "roles": [
              "citizen"
            ]
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "firstname": "Romain",
                "lastname": "Terieur",
                "phone": "+6624582",
                "roles": [
                  "citizen"
                ]
              }
  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve a user by its id.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }     
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update a user specified by its id.
      body:
        application/json:
          example: |
            {
              "firstname": "Romain",
              "lastname": "Terieur",
              "phone": "+6624582",
              "roles": [
                "citizen"
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a user specified by its id.
      responses:
        204:
          body:

/issues:
  description: Issue resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: |
      Retrieve a list of issues. 
      The parameters that content as an Object receive the ID of this Object and not its content. 
      This service doesn't return the list of tags and comments. This is when calling a special Issue (by ID) that such informations is returned.
    queryParameters:
      ps:
        displayName: ps
        type: string
        description: limit de number of results by page
        example: issues?ps=1
        required: false
      p:
        displayName: p
        type: string
        description: go to the page
        example: issues?p=8
        required: false
      author:
        displayName: author
        type: string
        description: filtering by author ID
        example: issues?author=54d8ae163sadg7555781a4
        required: false
      issueType:
        displayName: issueType
        type: string
        description: filtering by issueType ID
        example: issues?issueType=54d8ae163sadg7555781a4
        required: false
      fromDate:
        displayName: fromDate
        type: string
        description: filtering from a date
        example: issues?fromDate=2014-09-20
        required: false
      toDate:
        displayName: toDate
        type: string
        description: filtering until a date
        example: issues?toDate=2014-10-20
        required: false
      solved:
        displayName: solved
        type: boolean
        description: filtering by solved issue
        example: issues?solved=true
        required: false
    responses:
      200:
          body:
            application/json:
              example: |
                [
                  {
                    "id": "54d8ae163sadg755c81a4",
                    "author": "54d8ae163sadg7555781a4",
                    "issueType": "54d8ae163sadg7555781a4",
                    "description": "Lampadaire cassé",
                    "latitude": "40,689249400000000000",
                    "longitude": "-74,044500400000000000",
                    "status": "acknowledged",
                    "staffmember": "54d8ae163sadg7555781a4",
                    "creatingDate": "2014-08-20 15:30:00",
                    "closingDate": "2014-09-20 15:30:00"
                  },
                  {
                    "id": "54d8ae163sadg7555781a4",
                    "author": "54d8ae163sadg7555781a4",
                    "issueType": "54d8ae163sadg7555781a4",
                    "description": "Lampadaire tombé",
                    "latitude": "40,689249400000000000",
                    "longitude": "-74,044500400000000000",
                    "status": "created",
                    "staffmember": "54d8ae163sadg7555781a4",
                    "creatingDate": "2014-08-20 15:30:00",
                    "closingDate": "2014-09-20 15:30:00"
                  },
                  ...
                ]

  post:
    description: |
      Create a new issue.
      The status is automatically "created " with the creation of the Issue and the staffmember is not assigned. 
      An action " updateStaffmember " is available to associate a staffmember (issue/{id}/action/updateStaffmember).
    body:
      application/json:
        example: |
          {
            "author": "http://localhost/api/users/{id}",
            "issueType": "http://localhost/api/issueType/{id}",
            "description": "Lampadaire cassé",
            "latitude": "40,689249400000000000",
            "longitude": "-74,044500400000000000"
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163sadg7555781a4",
                "author": "http://localhost/api/users/{id}",
                "issueType": "http://localhost/api/issueType/{id}",
                "description": "Lampadaire cassé",
                "latitude": "40,689249400000000000",
                "longitude": "-74,044500400000000000",
                "status": "created",
                "staffmember": "null",
                "creatingDate": "2014-08-20 15:30:00",
                "closingDate": "2014-09-20 15:30:00"
              }

  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: |
        Retrieve an issue specified by its id.
        This service returns all parameters of the Issue.
        For all parameters that contain an object, the whole object is returned.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163sadg7555781a4",
                  "author": "http://localhost/api/users/{id}",
                  "issueType": "http://localhost/api/issueType/{id}",
                  "description": "Lampadaire cassé",
                  "latitude": "40,689249400000000000",
                  "longitude": "-74,044500400000000000",
                  "status": "acknowledged",
                  "staffmember": "http://localhost/api/users/{id}",
                  "creatingDate": "2014-08-20 15:30:00",
                  "closingDate": "2014-09-20 15:30:00"
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: |
        Update an issue specified by its id.
        All parameters are updated, except the ID, comments, tags and creatingDate.
        It's necessary to put all parameters to the body .
      body:
        application/json:
          example: |
            {
              "author": "http://localhost/api/users/{id}",
              "issueType": "http://localhost/api/issueType/{id}",
              "description": "Lampadaire non plus déféctueux mais araché par un jeune délinquant.",
              "latitude": "40,689249400000000000",
              "longitude": "-74,044500400000000000",
              "status": "created",
              "staffmember": "http://localhost/api/users/{id}",
              "closingDate": "2014-09-20 15:30:00"
            }
      responses:
        200:
          body: 
            application/json:
              example: |
                {
                  "id": "54d8ae163sadg7555781a4",
                  "author": "http://localhost/api/users/{id}",
                  "issueType": "http://localhost/api/issueType/{id}",
                  "description": "Lampadaire non plus déféctueux mais araché par un jeune délinquant.",
                  "latitude": "40,689249400000000000",
                  "longitude": "-74,044500400000000000",
                  "status": "created",
                  "staffmember": "http://localhost/api/users/{id}",
                  "creatingDate": "2014-08-20 15:30:00",
                  "closingDate": "2014-09-20 15:30:00"
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete an issue specified by its id.
      responses:
        204:
          body:

    /actions:
      get:
        is: [auth: { roles: 'staff' }]
        description: Retrieve a list of actions specified by an issue.
        responses:
          200:
              body:
                application/json:
                  example: |
                    [
                      {
                        "id": "54d8ae163fd30364605c81a4",
                        "type": "addComment",
                        "content":  {
                                      "attribut1": "contenu1", 
                                      "attribut2": "contenu2", 
                                      ..
                                    },
                        "creatingDate": "2014-08-20 15:30:00"
                      },
                      {
                        "id": "54d8ae163fd30364605c81a4",
                        "type": "addTag",
                        "content":  {
                                      "attribut1": "contenu1", 
                                      "attribut2": "contenu2", 
                                      ..
                                    },
                        "creatingDate": "2014-08-20 15:40:00"
                      },
                      ...
                    ]
      post:
        description: Create an action for an issue.
        body:
          application/json:
            example: |
              {
                "type": "addComment",
                "content":  {
                              "attribut1": "contenu1", 
                              "attribut2": "contenu2", 
                              ..
                            },
              }
        responses:
          201:
            body:
              application/json:
                example: |
                  {
                    "id": "54d8ae163fd30364605c81a4",
                    "type": "addComment",
                    "content":  {
                                  "attribut1": "contenu1", 
                                  "attribut2": "contenu2", 
                                  ..
                                },
                    "creatingDate": "2014-08-20 15:30:00"
                  }

/issueType:
  description: IssueType resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of issueTypes.
    queryParameters:
      search:
        displayName: search
        type: string
        description: Searching a word into the content of his parameters. 
        example: issuetypes?search=Highway
        required: false
      order:
        displayName: order
        type: string
        description: List ordering (ASC/DESC)
        example: issuetypes?order=ASC
        required: false
      by:
        displayName: by
        type: string
        description: Ordering by parameter
        example: issuetypes?by=shortname
        required: false
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd303634505c81a4",
                  "shortname": "Panne",
                  "description": "Panne du matériel public"
                },
                {
                  "id": "54d8aedsadfd30364605c81a9",
                  "shortname": "Casse",
                  "description": "Matériel public cassé"
                },
                ...
              ]
  post:
    description: Create a new issueType.
    body:
      application/json:
        example: |
          {
            "shortname": "Casse",
            "description": "Matériel public cassé"    
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8aedsadfd30364605c81a9",
                "shortname": "Casse",
                "description": "Matériel public cassé"
              }
  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve a issueType by its id.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd303634505c81a4",
                  "shortname": "Panne",
                  "description": "Panne du matériel public"
                }     
    put:
      is: [auth: {roles: 'staff'} ]
      description: |
        Update a issueType specified by its id.
        All parameters are updated, except the ID.
        It's necessary to put all parameters to the body.
      body:
        application/json:
          example: |
            {
              "shortname": "Panne",
              "description": "Panne du matériel public"
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd303634505c81a4",
                  "shortname": "Panne",
                  "description": "Panne du matériel public"
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a issueType specified by its id.
      responses:
        204:
          body:

/actions:
  description: Actions resource
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrieve a list of actions.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "type": "addComment",
                  "content":  {
                                "attribut1": "contenu1", 
                                "attribut2": "contenu2", 
                                ..
                              },
                  "creatingDate": "2014-08-20 15:30:00"
                },
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "type": "addTag",
                  "content":  {
                                "attribut1": "contenu1", 
                                "attribut2": "contenu2", 
                                ..
                              },
                  "creatingDate": "2014-08-20 15:40:00"
                },
                ...
              ]

/data:
  description: Data resource.
  /populate:
    post:
      description: Allow to populate random data to have a starting situation.
      responses:
        200:
          body:

