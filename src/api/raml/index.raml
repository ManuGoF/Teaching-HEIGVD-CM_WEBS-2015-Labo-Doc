#%RAML 0.8
---
title: API Resource
baseUri: https://localhost/api/
protocols: [HTTPS]
mediaType: application/json

traits:
  - auth: !include _traits/auth.raml

/users:
  description: User resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrive the list of the users.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                },
                {
                  "id": "54d8ae163fd30364605c81a9",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+8211332",
                  "roles": [
                    "citizen",
                    "staff"
                  ]
                },
                ...
              ]
  post:
    description: Create a new user.
    body:
      application/json:
        example: |
          {
            "firstname": "Romain",
            "lastname": "Terieur",
            "phone": "+6624582",
            "roles": [
              "citizen"
            ]
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163fd30364605c81a4",
                "firstname": "Romain",
                "lastname": "Terieur",
                "phone": "+6624582",
                "roles": [
                  "citizen"
                ]
              }

  /{id}:
    get:
      is: [auth: {roles: 'any'} ]
      description: Retrieve the details of a specific user.
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    put:
      is: [auth: {roles: 'staff'} ]
      description: Update the details of a specific user.
      body:
        application/json:
          example: |
            {
              "firstname": "Romain",
              "lastname": "Terieur",
              "phone": "+6624582",
              "roles": [
                "citizen"
              ]
            }
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163fd30364605c81a4",
                  "firstname": "Romain",
                  "lastname": "Terieur",
                  "phone": "+6624582",
                  "roles": [
                    "citizen"
                  ]
                }
    delete:
      is: [auth: {roles: 'staff'} ]
      description: Delete a specific user.
      responses:
        204:
          body:

/issues:
  description: Issue resource.
  get:
    is: [auth: { roles: 'staff' }]
    description: Retrive the list of the users.
    queryParameters:
      sorting:
        displayName: sorting
        type: string
        description: List ordering (ASC/DESC)
        example: Not for the moment
        required: false
      paging:
        displayName: paging
        type: string
        description: Manage the collection pagination
        example: Not for the moment
        required: false
      filtering:
        displayName: filtering
        type: string
        description: |
          Criteria to filter data
          - `userID` int, Criteria to list by a particular user (ID).
          - `fromDate` datetime, Criteria to list from a date.
          - `toDate` datetime, Criteria to list until a date.
          - `resolved` boolean, Criteria to list resolved issues (TRUE or FALSE).
          - `issueTypeId` int, Criteria to list by a certain issueType (ID).
        example: Not for the moment
        required: false
    responses:
      200:
          body:
            application/json:
              example: |
                {
                  "id": "54d8ae163sadg755c81a4",
                  "authorId": "baseURL/userId",
                  "issueTypeId": "baseURL/issueType"
                  "description": "Lampadaire cassé",
                  "latitude": "40,689249400000000000",
                  "longitude": "-74,044500400000000000",
                  "status": "acknowledged",
                  "staffmemberId": "baseURL/userId",
                  "creatingDate": "2014-08-20 15:30:00",
                  "closingDate": "2014-09-20 15:30:00"
                }
  post:
    description: Create a new issue.
    body:
      application/json:
        example: |
          {
            "authorId": "baseURL/userId",
            "issueTypeId": "baseURL/issueType"
            "description": "Lampadaire cassé",
            "latitude": "40,689249400000000000",
            "longitude": "-74,044500400000000000",
            "status": "acknowledged",
            "staffmemberId": "baseURL/userId",
            "creatingDate": "2014-08-20 15:30:00",
            "closingDate": "2014-09-20 15:30:00"
          }
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "id": "54d8ae163sadg755c81a4",
                "authorId": "baseURL/userId",
                "issueTypeId": "baseURL/issueType"
                "description": "Lampadaire cassé",
                "latitude": "40,689249400000000000",
                "longitude": "-74,044500400000000000",
                "status": "acknowledged",
                "staffmemberId": "baseURL/userId",
                "creatingDate": "2014-08-20 15:30:00",
                "closingDate": "2014-09-20 15:30:00"
              }

  /{id}:
    description: User resource.
    get:

    post:

/data:
  description: Data resource.
  /populate:
    post:
      description: Allow to populate random data to have a starting situation.
      responses:
        200:
          body:
